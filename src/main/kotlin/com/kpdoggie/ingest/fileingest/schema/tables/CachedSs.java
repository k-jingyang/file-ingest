/*
 * This file is generated by jOOQ.
 */
package com.kpdoggie.ingest.fileingest.schema.tablesdrop table cached_mapping_;


import com.kpdoggie.ingest.fileingest.schema.Keys;
import com.kpdoggie.ingest.fileingest.schema.Public;
import com.kpdoggie.ingest.fileingest.schema.tables.records.CachedSsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CachedSs extends TableImpl<CachedSsRecord> {

    private static final long serialVersionUID = -1470445103;

    /**
     * The reference instance of <code>PUBLIC.CACHED_SS</code>
     */
    public static final CachedSs CACHED_SS = new CachedSs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CachedSsRecord> getRecordType() {
        return CachedSsRecord.class;
    }

    /**
     * The column <code>PUBLIC.CACHED_SS.SS_ID</code>.
     */
    public final TableField<CachedSsRecord, Integer> SS_ID = createField(DSL.name("SS_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CACHED_SS.SS_NAME</code>.
     */
    public final TableField<CachedSsRecord, String> SS_NAME = createField(DSL.name("SS_NAME"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.CACHED_SS.S_ID</code>.
     */
    public final TableField<CachedSsRecord, Integer> S_ID = createField(DSL.name("S_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.CACHED_SS</code> table reference
     */
    public CachedSs() {
        this(DSL.name("CACHED_SS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CACHED_SS</code> table reference
     */
    public CachedSs(String alias) {
        this(DSL.name(alias), CACHED_SS);
    }

    /**
     * Create an aliased <code>PUBLIC.CACHED_SS</code> table reference
     */
    public CachedSs(Name alias) {
        this(alias, CACHED_SS);
    }

    private CachedSs(Name alias, Table<CachedSsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CachedSs(Name alias, Table<CachedSsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CachedSs(Table<O> child, ForeignKey<O, CachedSsRecord> key) {
        super(child, key, CACHED_SS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CachedSsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CACHED_SS;
    }

    @Override
    public UniqueKey<CachedSsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<CachedSsRecord>> getKeys() {
        return Arrays.<UniqueKey<CachedSsRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public CachedSs as(String alias) {
        return new CachedSs(DSL.name(alias), this);
    }

    @Override
    public CachedSs as(Name alias) {
        return new CachedSs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CachedSs rename(String name) {
        return new CachedSs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CachedSs rename(Name name) {
        return new CachedSs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
