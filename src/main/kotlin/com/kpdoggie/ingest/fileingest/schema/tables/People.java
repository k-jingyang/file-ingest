/*
 * This file is generated by jOOQ.
 */
package com.kpdoggie.ingest.fileingest.schema.tables;


import com.kpdoggie.ingest.fileingest.schema.Keys;
import com.kpdoggie.ingest.fileingest.schema.Public;
import com.kpdoggie.ingest.fileingest.schema.tables.records.PeopleRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class People extends TableImpl<PeopleRecord> {

    private static final long serialVersionUID = -1955726096;

    /**
     * The reference instance of <code>PUBLIC.PEOPLE</code>
     */
    public static final People PEOPLE = new People();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleRecord> getRecordType() {
        return PeopleRecord.class;
    }

    /**
     * The column <code>PUBLIC.PEOPLE.PERSON_ID</code>.
     */
    public final TableField<PeopleRecord, Integer> PERSON_ID = createField(DSL.name("PERSON_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PEOPLE.NAME</code>.
     */
    public final TableField<PeopleRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.PEOPLE.GENDER</code>.
     */
    public final TableField<PeopleRecord, String> GENDER = createField(DSL.name("GENDER"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>PUBLIC.PEOPLE.DOB</code>.
     */
    public final TableField<PeopleRecord, LocalDate> DOB = createField(DSL.name("DOB"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.PEOPLE.AGE</code>.
     */
    public final TableField<PeopleRecord, Integer> AGE = createField(DSL.name("AGE"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.PEOPLE</code> table reference
     */
    public People() {
        this(DSL.name("PEOPLE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PEOPLE</code> table reference
     */
    public People(String alias) {
        this(DSL.name(alias), PEOPLE);
    }

    /**
     * Create an aliased <code>PUBLIC.PEOPLE</code> table reference
     */
    public People(Name alias) {
        this(alias, PEOPLE);
    }

    private People(Name alias, Table<PeopleRecord> aliased) {
        this(alias, aliased, null);
    }

    private People(Name alias, Table<PeopleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> People(Table<O> child, ForeignKey<O, PeopleRecord> key) {
        super(child, key, PEOPLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PeopleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PEOPLE;
    }

    @Override
    public UniqueKey<PeopleRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<PeopleRecord>> getKeys() {
        return Arrays.<UniqueKey<PeopleRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public People as(String alias) {
        return new People(DSL.name(alias), this);
    }

    @Override
    public People as(Name alias) {
        return new People(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(String name) {
        return new People(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(Name name) {
        return new People(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDate, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
