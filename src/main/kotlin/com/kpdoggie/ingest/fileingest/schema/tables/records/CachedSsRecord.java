/*
 * This file is generated by jOOQ.
 */
package com.kpdoggie.ingest.fileingest.schema.tables.records;


import com.kpdoggie.ingest.fileingest.schema.tables.CachedSs;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CachedSsRecord extends UpdatableRecordImpl<CachedSsRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = -1816374099;

    /**
     * Setter for <code>PUBLIC.CACHED_SS.SS_ID</code>.
     */
    public void setSsId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.CACHED_SS.SS_ID</code>.
     */
    public Integer getSsId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.CACHED_SS.SS_NAME</code>.
     */
    public void setSsName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.CACHED_SS.SS_NAME</code>.
     */
    public String getSsName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.CACHED_SS.S_ID</code>.
     */
    public void setSId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.CACHED_SS.S_ID</code>.
     */
    public Integer getSId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CachedSs.CACHED_SS.SS_ID;
    }

    @Override
    public Field<String> field2() {
        return CachedSs.CACHED_SS.SS_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return CachedSs.CACHED_SS.S_ID;
    }

    @Override
    public Integer component1() {
        return getSsId();
    }

    @Override
    public String component2() {
        return getSsName();
    }

    @Override
    public Integer component3() {
        return getSId();
    }

    @Override
    public Integer value1() {
        return getSsId();
    }

    @Override
    public String value2() {
        return getSsName();
    }

    @Override
    public Integer value3() {
        return getSId();
    }

    @Override
    public CachedSsRecord value1(Integer value) {
        setSsId(value);
        return this;
    }

    @Override
    public CachedSsRecord value2(String value) {
        setSsName(value);
        return this;
    }

    @Override
    public CachedSsRecord value3(Integer value) {
        setSId(value);
        return this;
    }

    @Override
    public CachedSsRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CachedSsRecord
     */
    public CachedSsRecord() {
        super(CachedSs.CACHED_SS);
    }

    /**
     * Create a detached, initialised CachedSsRecord
     */
    public CachedSsRecord(Integer ssId, String ssName, Integer sId) {
        super(CachedSs.CACHED_SS);

        set(0, ssId);
        set(1, ssName);
        set(2, sId);
    }
}
