/*
 * This file is generated by jOOQ.
 */
package com.kpdoggie.ingest.fileingest.schema.tables;


import com.kpdoggie.ingest.fileingest.schema.Public;
import com.kpdoggie.ingest.fileingest.schema.tables.records.CachedMappingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CachedMapping extends TableImpl<CachedMappingRecord> {

    private static final long serialVersionUID = 1829617;

    /**
     * The reference instance of <code>PUBLIC.CACHED_MAPPING</code>
     */
    public static final CachedMapping CACHED_MAPPING = new CachedMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CachedMappingRecord> getRecordType() {
        return CachedMappingRecord.class;
    }

    /**
     * The column <code>PUBLIC.CACHED_MAPPING.S_ID</code>.
     */
    public final TableField<CachedMappingRecord, Integer> S_ID = createField(DSL.name("S_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.CACHED_MAPPING.SS_ID</code>.
     */
    public final TableField<CachedMappingRecord, Integer> SS_ID = createField(DSL.name("SS_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.CACHED_MAPPING.MAPPED_S_ID</code>.
     */
    public final TableField<CachedMappingRecord, Integer> MAPPED_S_ID = createField(DSL.name("MAPPED_S_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.CACHED_MAPPING</code> table reference
     */
    public CachedMapping() {
        this(DSL.name("CACHED_MAPPING"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CACHED_MAPPING</code> table reference
     */
    public CachedMapping(String alias) {
        this(DSL.name(alias), CACHED_MAPPING);
    }

    /**
     * Create an aliased <code>PUBLIC.CACHED_MAPPING</code> table reference
     */
    public CachedMapping(Name alias) {
        this(alias, CACHED_MAPPING);
    }

    private CachedMapping(Name alias, Table<CachedMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CachedMapping(Name alias, Table<CachedMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CachedMapping(Table<O> child, ForeignKey<O, CachedMappingRecord> key) {
        super(child, key, CACHED_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public CachedMapping as(String alias) {
        return new CachedMapping(DSL.name(alias), this);
    }

    @Override
    public CachedMapping as(Name alias) {
        return new CachedMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CachedMapping rename(String name) {
        return new CachedMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CachedMapping rename(Name name) {
        return new CachedMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
